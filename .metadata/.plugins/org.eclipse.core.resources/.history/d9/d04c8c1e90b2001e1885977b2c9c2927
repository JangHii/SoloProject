package com.myweb.www.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

public class RootConfig {

	// DB 설정 부분
	// hikaiCP 사용 
	// log4jdbc-log4j2 사용
	
	@Autowired
	// Bean을 사용할수있게 한다.
	ApplicationContext applicationContext;
	
	public DataSource dataSource() { // javax.spl (import)
		
		// JAVA와 DB간의 연결을 향상시킬수있는 (HikariCP)
		HikariConfig hikariConfig = new HikariConfig();
		
		// 기본설정
		// log4jdbc-log4j2
		// JDBC 쿼리를 로깅한다 
		hikariConfig.setDriverClassName("net.sf.log4jdbc.spl.jdbcapi.Driverspy");
		hikariConfig.setJdbcUrl("jdbc:log4jdbc:mysql://localhost:3306/mywebdb");
		hikariConfig.setUsername("mywebUser"); // 데이터베이스 사용자명
		hikariConfig.setPassword("mysql"); // 사용자 비밀번호
		
		hikariConfig.setMaximumPoolSize(5); //최대 커넥션 갯수
		hikariConfig.setMinimumIdle(5); // 최소 유효 커넥션 갯수 (최대값과 같아야함)
		
		// test 쿼리문 (쿼리문 확인)
		// 초기 커넥션 생성시 실행문
		hikariConfig.setConnectionInitSql("SLELECT now()"); 
		// 커넥션풀의 이름 
		hikariConfig.setPoolName("springHikarICP");
		
		// 추가설정
		// cachePrepStmts : cache 사용 여부 설정
		hikariConfig.addDataSourceProperty("dataSource.cachePrepStmts", "true");
		
		// mysql 드라이버가 연결당 cache statment의 수에 관한 설정
		// 250 ~ 500 사이 권장
		hikariConfig.addDataSourceProperty("dataSource.prepStmtCacheSize", "250");
		
		// connection 당 캐싱할 preparedStatement의 개수 지정 옵션
		// degault 256
		// 기본값으로 설정
		hikariConfig.addDataSourceProperty("dataSource.useServerPrepStmts", "true");
		
		// mysql 서버에서 최신 이슈가 있을 경우 지원받는 설정
		hikariConfig.addDataSourceProperty("dataSource.useServerPrepStmts", "true");
		
		HikariDataSource hikariDataSource = new HikariDataSource(hikariConfig);
		
		return hikariDataSource;
	}
	
	@Bean
	public SqlSessionFactory sqlSessionFactory() throws Exception{
		SqlSessionFactoryBean sqlFactoryBean = new SqlSessionFactoryBean();
		sqlFactoryBean.setDataSource(dataSource());
		sqlFactoryBean.setMapperLocations(
				applicationContext.getResources("classpath:/mappers/*.xml/"));
	}
	
}
